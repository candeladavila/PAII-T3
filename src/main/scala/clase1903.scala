object  clase1903 extends App {
  /*
Programaci√≥n concurrente:
El uso del operador secuencial ";" √≠ndica un orden arbitrario
Cualquier permutaci√≥n de las instrucciones da lugar a un programa correcto
En un programa secuencial el programador tiene que decidir el orden en el que se ejecutan las instrucciones

Lo que nos gustar√≠a es tener en el lenguaje de programaci√≥n un operador en el que fuera capaz de expresar que da igual el
orden de las operciones -> OPERADOR PARALELO

Operador paralelo: || (no es este s√≠mbolo pero es la misma idea)
Cuando compongo codigo con este operador da igual el orden en el que se ejecute el c√≥digo
No es determinista, hay distintas ejecuciones secuenciales
Ejemplo: x = 0 || y = 0 || z = 0 = { x = 0 -> y = 0 -> z = 0, x = 0 -> z = 0 -> y = 0, ...}
El indeterminismo da errores para la deputaci√≥n del programa (NUNCA) solo puedo detectar que hay un error,
si no lo detecta no puedo saber si est√° bien porque no puedo hacer una b√∫squeda exahaustiva

PROGRAMACI√ìN CONCURRENTE
Imaginamos que tenemos tres procesos (en paralelo) si mi m√°quina tuviera 3 procesadores entonces podr√≠amos asignar cada
c√≥digo en un procesador -> ser√≠a m√°s r√°pido

Se pueden solapar en el tiempo -> existen ejecuciones v√°lidas de un c√≥digo en el que dos c√≥digos est√°n simult√°neamente ejecut√°ndose

¬øC√≥mo razonamos el paralelo si solo tengo un procesador?
Si tenemos que ejecutar dos c√≥digos P,Q gruesos (involucran computaci√≥n) como razono en como es la ejecuci√≥n de P paralelo con Q si solo tengo un procesador
La idea es la sem√°ntica del interleaving -> la ejecuci√≥n paralela de los c√≥digos se ejecuta entrelazando los procesos de los c√≥digos

Ejemplo:
P = p1 -> p2 -> ... -> pn
Q = q1 -> q2 -> ... -> pm
Mentalmente nos imaginamos que cada uno tiene un procesador -> tiene un contador por donde va cada proceso ejecut√°ndose
Se inicializa con las primeras instrucciones de cada proceso
Una vez que tenemos eso, la m√°quina escoge de forma indeterminista cu√°l de los dos procesos ejecutar (se genera un √°rbol de los distintos caminos posibles -> nodos hoja = ejecuciones v√°lidas)
Dependiendo de lo que se haya ejecutado movemos el contador del proceso que se haya hecho

NOTA: No suele ocurrir que un procesador tenga un solo proceso (normalmente son m√°s grandes y en la pr√°ctica cada procesador tiene mucha capacidad)
NOTA: Cada camino del √°rbol se conoce como trama de ejecuci√≥n
      N√∫mero de tramas de ejecuci√≥n de cada uno de los programas crece de forma m√°s que exponencial = (m+n)!/(m!*n!)

Al principio no sabes cu√°l de las ejecuciones del √°rbol son correctas -> cuando lleguemos a la hoja el resultado deber√≠a ser correcto para todas
Si hay un error en alguna no tenemos por qu√© saber donde est√° -> para saberlo ejecutamos varias veces

La ejecuci√≥n secuencial es una de las posibles ejecuciones concurrentes

ORDEN PARCIAL
El orden del entrelazado no es arbitraria -> el orden de las instrucciones de cada uno de los procesos se mantiene
Componemos procesos secuenciales -> las instrucciones de P y Q se ejecutan en el orden en el que lo indiquemos, lo que no sabemos es el orden del entrelazado de instrucciones

Entrelazado arbitrario -> no podemos:
-hacer suposiciones sobre la velocidad relativa entre procesadores l√≥gicos
-hacer suposiciones sobre la velocidad real de ejecuci√≥n

 */
/*
  import scala.util.Random

  def intercambio(lista: Array[Int]): Unit = {
    for (i <- lista.indices) {
      for (j <- i + 1 until lista.length) {
        if (lista(i) > lista(j)) {
          val aux = lista(i)
          lista(i) = lista(j)
          lista(j) = aux
        }
      }
    }
  }

  def mezclarIt(l1: Array[Int], l2: Array[Int], lista: Array[Int]) = {
    var i = 0
    var j = 0
    var k = 0
    while (i < l1.length && j < l2.length) {
      if (l1(i) <= l2(j)) {
        lista(k) = l1(i);
        i += 1
      } else {
        lista(k) = l2(j);
        j += 1
      }
      k += 1
    }
    while (i < l1.length) {
      lista(k) = l1(i);
      i += 1;
      k += 1
    }
    while (j < l2.length) {
      lista(k) = l2(j);
      j += 1;
      k += 1
    }
  }

  //OPCI√ìN 1: caso secuencial
  val a = new Array[Int](20)
  for (i <- 0 until a.length) {
    a(i) = Random.nextInt(100)
  }
  println(s"Array inicial: ${a.mkString(" ")}")
  val (a1, a2) = a.splitAt(a.length / 2)
  intercambio(a1)
  intercambio(a2)
  mezclarIt(a1, a2, a)
  println(s"Array ordenado: ${a.mkString(" ")}")
  //fin opcion 1

  class Hebra(a3: Array[Int]) extends Thread {
    override def run = intercambio(a3)
  }

  val a3 = new Array[Int](20)
  for (i <- 0 until a3.length) {
    a3(i) = Random.nextInt(100)
  }
  println(s"Array inicial concurrente: ${a3.mkString(" ")}")
  val (a31, a32) = a3.splitAt(a3.length / 2)
  val h1 = new Hebra(a31)
  val h2 = new Hebra(a32)
  h1.start();
  h2.start() //empiezan a entrelazarse las hebras
  h1.join();
  h2.join() //empiezan a competir por el procesador -> funci√≥n de sincronizaci√≥n
  mezclarIt(a31, a32, a3) //mezclamos los resultados
  println(s"Array ordenado concurrente: ${a3.mkString(" ")}")
*/
  /*
Los procesos de un programa concurrente habitualmente se comunican y sincronizan sus acciones
Se pueden comunicar a trav√©s de memoria compartida o paso de mensajes (memoria distribuida)

PROBLEMAS DE LA PROGRAMACI√ìN CONCURRENTE

 */

  import scala.util.Random

  // Algoritmo de ordenaci√≥n por intercambio (Bubble Sort)
  def intercambio(lista: Array[Int]): Unit = {
    val n = lista.length
    println(s"Iniciando ordenaci√≥n con ${lista.mkString(" ")}") // Depuraci√≥n

    for (i <- 0 until n - 1) {
      for (j <- 0 until n - 1 - i) {
        if (lista(j) > lista(j + 1)) {
          val aux = lista(j)
          lista(j) = lista(j + 1)
          lista(j + 1) = aux
          println(s"Iteraci√≥n $i-$j: ${lista.mkString(" ")}") // Ver cambios
        }
      }
    }

    println(s"Ordenaci√≥n finalizada: ${lista.mkString(" ")}")
  }

  // Algoritmo de mezcla ordenada
  def mezclarIt(l1: Array[Int], l2: Array[Int], lista: Array[Int]): Unit = {
    var i, j, k = 0
    while (i < l1.length && j < l2.length) {
      if (l1(i) <= l2(j)) {
        lista(k) = l1(i);
        i += 1
      } else {
        lista(k) = l2(j);
        j += 1
      }
      k += 1
    }
    while (i < l1.length) {
      lista(k) = l1(i);
      i += 1;
      k += 1
    }
    while (j < l2.length) {
      lista(k) = l2(j);
      j += 1;
      k += 1
    }
  }

  // Opci√≥n 1: Ordenaci√≥n secuencial
  val a = Array.fill(20)(Random.nextInt(100))
  println(s"Array inicial: ${a.mkString(" ")}")

  val (a1, a2) = a.splitAt(a.length / 2)
  intercambio(a1)
  intercambio(a2)
  mezclarIt(a1, a2, a)

  println(s"Array ordenado secuencialmente: ${a.mkString(" ")}")

  // Opci√≥n 2: Ordenaci√≥n concurrente con hilos
  // Clase para ejecutar la ordenaci√≥n en un hilo
  class Hebra(private val lista: Array[Int]) extends Thread {
    override def run(): Unit = {
      println(s"üü¢ Inicio de hebra para: ${lista.mkString(" ")}")
      intercambio(lista) // Ahora usa sortInPlace() para evitar bloqueos
      println(s"‚úÖ Hebra finalizada para: ${lista.mkString(" ")}")
    }
  }

  // Creaci√≥n del array y su divisi√≥n
  val a3 = Array.fill(20)(Random.nextInt(100))
  println(s"Array inicial concurrente: ${a3.mkString(" ")}")

  val (a31, a32) = a3.splitAt(a3.length / 2)

  // Crear y ejecutar hilos
  val h1 = new Hebra(a31)
  val h2 = new Hebra(a32)

  h1.start()
  h2.start()

  // Verificar que los hilos inician
  println("‚è≥ Esperando a que los hilos terminen...")

  h1.join() // Si no termina, el hilo se bloque√≥
  println("‚úî Hebra 1 completada")

  h2.join() // Si no termina, el hilo se bloque√≥
  println("‚úî Hebra 2 completada")

  // Mezclar resultados
  mezclarIt(a31, a32, a3)
  println(s"Array ordenado concurrentemente: ${a3.mkString(" ")}")
}